#!/bin/bash
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (C) 2012 Ivan Rodriguez Murillo <wantez@gmail.com>. All rights reserved.
#
# Licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License

set -e

scriptPath=${0%/*}

source $scriptPath/common

BUILD_RES=$BUILDDIR/Contents/Resources
APP_RES="$scriptPath/../VisualSFM.app/Contents/Resources"


function repair_libs () {
	echo "Relinking libs"
	for library in $(find $1)
	do
		filename=$(basename $library)
		extension=${filename##*.}
		if [ "$extension" = "dylib" -o "$extension" = "so" ]; then
			echo "Relinking $library"
			chmod 777 $library
			libs=$(otool -L "$library" 2>/dev/null | fgrep compatibility | cut -d\( -f1  | grep Contents/Resources  | sort | uniq)
			KEYWORD=$(echo Contents/Resources | sed -e 's/\//\\\//g')
			REPLACE=$HOMEBREW
			for lib in $libs
			do
				echo "$lib -> ${lib/*$KEYWORD/$REPLACE}"
				install_name_tool -change $lib ${lib/*$KEYWORD/$REPLACE} "$library"
			done
			chmod 555 $library
		fi
	done
}

function repair_gdk {
	gdkLoaders=$(grep \\.so $1 | sed s/\"//g)
	for loader in $gdkLoaders
	do
		#echo $loader
		filename=$(basename $loader)
		#echo $filename
		$(cp $loader VisualSFM.app/Contents/Resources/lib/)
		dylibbundler -of -b -x "./VisualSFM.app/Contents/Resources/lib/$filename" -d ./VisualSFM.app/Contents/Resources/lib -p @executable_path  -i /usr/X11/lib
		#$(echo $loader | sed -e 's/\//\\\//g')
		KEYWORD=$(echo $loader | sed -e 's/\//\\\//g')
		REPLACE=$(echo $filename | sed -e 's/\//\\\//g')
		echo $KEYWORD
		sed -e "s/${KEYWORD}/${REPLACE}/g" $1  > output.file;mv output.file $1
	done
}

echo "Preparing app dir"
rm -fr $scriptPath/../VisualSFM.app
cp -R $scriptPath/../template_app $scriptPath/../VisualSFM.app

echo "Copying Cellar dir..."
cp -R "$BUILD_RES/Cellar" "$APP_RES/"

echo "Copying etc dir..."
cp -R "$BUILD_RES/etc" "$APP_RES/"

echo "Copying lib dir..."
cp -R "$BUILD_RES/lib" "$APP_RES/"

echo "Copying share dir..."
cp -R "$BUILD_RES/share" "$APP_RES/"

echo "Copying main binary..."
cp vsfm/bin/VisualSFM $APP_RES/bin/

echo "Relinking main binary"
libs=$(otool -L "$APP_RES/bin/VisualSFM" 2>/dev/null | fgrep compatibility | cut -d\( -f1  | grep Contents/Resources  | sort | uniq)
KEYWORD=$(echo Contents/Resources | sed -e 's/\//\\\//g')
REPLACE=$HOMEBREW
for lib in $libs
do
	install_name_tool -change $lib ${lib/*$KEYWORD/$REPLACE} "$APP_RES/bin/VisualSFM"
done

echo "Copying SiftGPU library..."
cp SiftGPU/bin/libsiftgpu.so $APP_RES/bin/

echo "Copying PBA library..."
cp pba/bin/libpba_no_gpu.so $APP_RES/bin/libpba.so

echo "Copying CMVS/PMVS2/genOption binaries..."
cp cmvs/program/main/cmvs $APP_RES/bin/
cp cmvs/program/main/pmvs2 $APP_RES/bin/
cp cmvs/program/main/genOption $APP_RES/bin/

echo "Relinking CMVS/PMVS2/genOption binaries"
libs=$(otool -L "$APP_RES/bin/pmvs2" 2>/dev/null | fgrep compatibility | cut -d\( -f1  | grep Contents/Resources  | sort | uniq)
KEYWORD=$(echo Contents/Resources | sed -e 's/\//\\\//g')
REPLACE=$HOMEBREW
for lib in $libs
do
	install_name_tool -change $lib ${lib/*$KEYWORD/$REPLACE} "$APP_RES/bin/pmvs2"
done


echo "Cleaning unused files"
rm -fr "$APP_RES/Cellar/boost"
rm -fr "$APP_RES/lib/libboost*"
rm -fr "$APP_RES/Cellar/pkg-config"
rm -fr "$APP_RES/lib/pkgconfig"

repair_libs "$APP_RES/Cellar"
repair_gdk "$APP_RES/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache"

echo "Disconnecting BUILDDIR link"
if [ -e "$APP_ROOT" ]; then 
	rm ${APP_ROOT} 
fi